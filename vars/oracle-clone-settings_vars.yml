# ----------------------------------------
# Clone Oracle instance
# ----------------------------------------
oracle_ami_target_instance:
 - instance_name: "{{ active_host_name }}"
   instance_id: "{{ _ec2_instance_facts.instances | selectattr('tags.Name', 'defined') | selectattr('tags.Name', 'equalto', active_host_name) | map(attribute='instance_id') | first }}"
   ami_name: "{{ active_host_name }}-oracle-installed"

oracle_standby_instance:
 - name: "{{ standby_host_name }}"
   key_name: "{{ aws_ec2_key_name }}"
   instance_type: "{{ standby_host_instance_type }}"
   # custom ami
   ami_id: "{{ ec2_ami_info_result.results[0].images[0].image_id }}"
   security_groups:
    - default
   subnet_name: "{{ private_subnet2_name }}"
   volumes:
    - device_name: /dev/sda1
      ebs:
        volume_size: "{{ active_host_volume_size1 }}"
        delete_on_termination: false
    - device_name: /dev/xvdb
      ebs:
        volume_size: "{{ active_host_volume_size2 }}"
        delete_on_termination: false
   private_ip: "{{ standby_host_ip_addr }}"
   source_dest_check: false
   assign_public_ip: false
   instance_role: "{{ aws_iam_role_name }}"
   secondary_private_ip: "{{ standby_host_ip_addr_commpath }}"
   secondary_eni_dev_index: 1
   secondary_subnet_name: "{{ commpath_subnet2_name }}"

add_oracle_standby_instance:
 - instance_name: "{{ standby_host_name }}"
   ip_address_type: private_ip_address
   groups:
    - oracle_hosts
    - lk_hosts
   ansible_user: "{{ lk_os_user }}"
   ansible_ssh_private_key_file: "files/{{ aws_ec2_key_name }}.pem"
   ansible_ssh_extra_args: "-t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand=\"ssh -t -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i files/{{ aws_ec2_key_name }}.pem {{ bastion_os_user }}@{{ bastion_ip }} -W %h:%p\""

