---
- name: facts subnet
  ec2_vpc_subnet_info:
    profile: "{{ aws_cli_profile | default(omit) }}"
    region: "{{ aws_region }}"
  register: _subnet_facts

- name: create ec2 instance
  ec2_instance:
    profile: "{{ aws_cli_profile | default(omit) }}"
    region: "{{ aws_region }}"
    name: "{{ item.name }}"
    key_name: "{{ item.key_name }}"
    instance_type: "{{ item.instance_type }}"
    image_id: "{{ item.ami_id }}"
    wait: yes
    security_groups: "{{ item.security_groups }}"
    vpc_subnet_id: "{{ _subnet_facts.subnets | selectattr('tags.Name', 'defined') | selectattr('tags.Name', 'equalto', item.subnet_name) | map(attribute='id') | first }}"
    volumes: "{{ item.volumes }}"
    network:
      assign_public_ip: "{{ item.assign_public_ip }}"
      private_ip_address : "{{ item.private_ip | default(omit) }}"
      source_dest_check: "{{ item.source_dest_check }}"
    instance_role: "{{ item.instance_role | default(omit) }}"
    filters: { "tag:Name": "{{ item.name }}", "vpc_id": "{{ aws_vpc.vpc.id }}" }
  with_items: "{{ ec2 }}"

- name: add secondary private address counts
  ec2_eni:
    profile: "{{ aws_cli_profile | default(omit) }}"
    region: "{{ aws_region }}"
    subnet_id: "{{ _subnet_facts.subnets | selectattr('tags.Name', 'defined') | selectattr('tags.Name', 'equalto', item.subnet_name) | map(attribute='id') | first }}"
    private_ip_address: "{{ item.private_ip | default(omit) }}"
    secondary_private_ip_address_count: "{{ item.secondary_private_ip_count | default(omit) }}"
    state: present
  with_items: "{{ ec2 }}"
  when: item.secondary_private_ip_address_count is defined

- name: add secondary private address, source/dest check setting
  ec2_eni:
    profile: "{{ aws_cli_profile | default(omit) }}"
    region: "{{ aws_region }}"
    subnet_id: "{{ _subnet_facts.subnets | selectattr('tags.Name', 'defined') | selectattr('tags.Name', 'equalto', item.subnet_name) | map(attribute='id') | first }}"
    source_dest_check: "{{ item.source_dest_check }}"
    private_ip_address: "{{ item.private_ip | default(omit) }}"
    purge_secondary_private_ip_addresses: "{{ item.purge_secondary_private_ip_addresses | default(omit) }}"
    secondary_private_ip_addresses: "{{ item.secondary_private_ip | default(omit)  }}"
    state: present
  with_items: "{{ ec2 }}"
  when: item.secondary_private_ip_address_count is defined

- name: facts ec2 instances
  ec2_instance_info:
    profile: "{{ aws_cli_profile | default(omit) }}"
    region: "{{ aws_region }}"
    filters:
      instance-state-name: ['running']
  register: _ec2_instance_facts

- name: get bastion ip addresss
  set_fact:
    bastion_ip: "{{ _ec2_instance_facts.instances | selectattr('tags.Name', 'defined') | selectattr('tags.Name', 'equalto', bastion_host_name) | map(attribute='public_ip_address') | first }}"

- name: add to inventory
  add_host:
    name: "{{ item.instance_name }}"
    ansible_host: "{{ _ec2_instance_facts.instances | selectattr('tags.Name', 'defined') | selectattr('tags.Name', 'equalto', item.instance_name) | map(attribute=item.ip_address_type) | first }}"
    groups: "{{ item.groups }}"
    ansible_user: "{{ item.ansible_user }}"
    ansible_ssh_private_key_file: "{{ item.ansible_ssh_private_key_file }}"
    ansible_ssh_extra_args: "{{ item.ansible_ssh_extra_args }}"
  with_items: "{{ add_inventory_hosts }}"



